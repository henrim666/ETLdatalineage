package Import_XML_Data;

//https://www.mkyong.com/java/how-to-read-xml-file-in-java-dom-parser/
// test file
//
// path XML object connector from root element
//<POWERMART>
//<REPOSITORY>
//<FOLDER>
//<MAPPING>
//<CONNECTOR>
//
//CONNECTOR:
//FROMFIELD, 
//FROMINSTANCE, 
//FROMINSTANCETYPE, 
//TOFIELD, 
//TOINSTANCE, 
//TOINSTANCETYPE, 

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Powercenter_XML_Import {
	
	private static final char DEFAULT_SEPARATOR = ',';
	//private static final String FILE_NAME = "C:/share/MyFirstRE_INSURANCE_LIFE.xls";
	//normal 1 : 1
	private static final String FILE_NAME = "C:/share/MyFirstAlchemy_LIFE.xls";
	private static final String FILE_NAMETEST = "C:/share/MyTEST_LIFE.xls";
	// not normal 1 : 1 this one has exp outputport has o_ lead in front of name
	
	@SuppressWarnings("deprecation")
	
	public static void main(String argv[]) {
		List<String> ConnectionsFROMFIELD = 			new ArrayList<String>();
		List<String> ConnectionsFROMINSTANCE = 			new ArrayList<String>();
		List<String> ConnectionsFROMINSTANCETYPE = 		new ArrayList<String>();
		List<String> ConnectionsTOFIELD = 				new ArrayList<String>();
		List<String> ConnectionsTOINSTANCE = 			new ArrayList<String>();
		List<String> ConnectionsTOINSTANCETYPE = 		new ArrayList<String>();
		List<String> ConnectionsTOFIELD_PK1 = 			new ArrayList<String>();
		List<String> ConnectionsTOINSTANCE_PK1 = 		new ArrayList<String>();
		List<String> ConnectionsTOINSTANCETYPE_PK1 = 	new ArrayList<String>();
		List<String> ConnectionsTOFIELD_PK2 = 			new ArrayList<String>();
		List<String> ConnectionsTOINSTANCE_PK2 = 		new ArrayList<String>();
		List<String> ConnectionsTOINSTANCETYPE_PK2 = 	new ArrayList<String>();
		
		List<String> ConnectionsOBJECTPORT = 			new ArrayList<String>();
		List<String> ConnectionsOBJECTNAME = 			new ArrayList<String>();
		List<String> ConnectionsOBJECTTYPE = 			new ArrayList<String>();
		
		List<String> RepositoryName = 			new ArrayList<String>();
		List<String> FolderNAME     = 			new ArrayList<String>();
		List<String> WorkflowNAME   = 			new ArrayList<String>();
		List<String> SessionNAME    = 			new ArrayList<String>();
		List<String> MappingNAME    = 			new ArrayList<String>();
		
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("Datatypes in Java");
        
        //XSSFWorkbook workbook = new XSSFWorkbook();
        //name of excell sheet exceed 31 characters
        //XSSFSheet sheet = workbook.createSheet("Datatypes in Java");
        
		String beginValueConnection = "Source Definition";
		boolean connection_found = false;
		boolean all_not_connected = false;
		
		int xml_left_offset = 2;
		int xml_top_offset = 3;
		
		try {
			File fXmlFile = new File("C:/ETL_WORFLOWS/REINS/wkf_RE_INSURANCE_LIFEJ.XML");
			//File fXmlFile = new File("C:/ETL_WORFLOWS/AlCHEMY/wkf_Alchemy.XML");
			DocumentBuilderFactory dbFactory 	= DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder 			= dbFactory.newDocumentBuilder();
			Document doc 						= dBuilder.parse(fXmlFile);

			//optional, but recommended
			//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			doc.getDocumentElement().normalize();

			System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
			

			
			//<REPOSITORY>
			//<FOLDER>
			//<MAPPING>
			//<CONNECTOR>
			NodeList nList = doc.getElementsByTagName("REPOSITORY");
			System.out.println("----------------------------");
			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				System.out.println("\nCurrent Element :" + nNode.getNodeName());
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					System.out.println("\nCurrent Element :" + eElement.getAttribute("NAME"));
					RepositoryName.add(eElement.getAttribute("NAME"));
				}
			}
			nList = doc.getElementsByTagName("FOLDER");
			System.out.println("----------------------------");

			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				System.out.println("\nCurrent Element :" + nNode.getNodeName());
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;					
					System.out.println("\nCurrent Element :" + eElement.getAttribute("NAME"));
					FolderNAME.add(eElement.getAttribute("NAME"));
				}
			}
			nList = doc.getElementsByTagName("WORKFLOW");
			System.out.println("----------------------------");

			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				System.out.println("\nCurrent Element :" + nNode.getNodeName());
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;					
					System.out.println("\nCurrent Element :" + eElement.getAttribute("NAME"));
					WorkflowNAME.add(eElement.getAttribute("NAME"));
				}
			}					
			nList = doc.getElementsByTagName("SESSION");
			System.out.println("----------------------------");

			for (int temp = 0; temp < nList.getLength(); temp++) {
				Node nNode = nList.item(temp);
				System.out.println("\nCurrent Element :" + nNode.getNodeName());
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;					
					System.out.println("\nCurrent Element :" + eElement.getAttribute("NAME"));
					//SessionNAME.add(eElement.getAttribute("NAME"));
					System.out.println("\nCurrent Element :" + eElement.getAttribute("MAPPINGNAME"));
					//MappingNAME.add(eElement.getAttribute("MAPPINGNAME"));
				}
			}
			nList = doc.getElementsByTagName("CONNECTOR");
			System.out.println("----------------------------");

			
			for (int temp = 0; temp < nList.getLength(); temp++) {

				Node nNode = nList.item(temp);

				//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				//all element is the XML file
//-----------------------------------------------------------------------------
//				load super table 		
//-----------------------------------------------------------------------------							
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					Element mElement = (Element) nNode.getParentNode();	
					MappingNAME.add(mElement.getAttribute("NAME"));
					ConnectionsFROMFIELD.add(eElement.getAttribute("FROMFIELD"));
					ConnectionsFROMINSTANCE.add(eElement.getAttribute("FROMINSTANCE"));
					ConnectionsFROMINSTANCETYPE.add(eElement.getAttribute("FROMINSTANCETYPE"));
					ConnectionsTOFIELD.add(eElement.getAttribute("TOFIELD"));
					ConnectionsTOINSTANCE.add(eElement.getAttribute("TOINSTANCE"));
					ConnectionsTOINSTANCETYPE.add(eElement.getAttribute("TOINSTANCETYPE"));
				}
			}
		    } catch (Exception e) {
			e.printStackTrace();
		    }
			//int Length_supertable = ConnectionsTOFIELD.size();
			//System.out.println("length supertable : " +Length_supertable);
//-----------------------------------------------------------------------------
//			start of Recursive data		
//-----------------------------------------------------------------------------			
			String ConnectionINSTANCETYPE = beginValueConnection;
			System.out.println("#1 FROMFIELD normal for loop");
			int counter01 = xml_left_offset;
			int counter02 = xml_top_offset;
			int excelcounter01 = xml_top_offset;
			for (int i = 0; i < ConnectionsFROMFIELD.size(); i++) {
				//System.out.println(counter02);
				if (ConnectionsFROMINSTANCETYPE.get(i).equals(ConnectionINSTANCETYPE)){
					counter02=counter02+1;
					excelcounter01 = excelcounter01 + 1;
					System.out.println(" "+ MappingNAME.get(i) + DEFAULT_SEPARATOR+ConnectionsFROMFIELD.get(i)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCE.get(i)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCETYPE.get(i)+DEFAULT_SEPARATOR+ConnectionsTOFIELD.get(i)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCE.get(i)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCETYPE.get(i));				
					Row r = sheet.getRow(counter02); // 1-16
					if (r == null) {r = sheet.createRow(counter02);}
					Cell c = r.getCell(counter01); // 0-3
					if (c == null) {c = r.createCell(counter01, Cell.CELL_TYPE_NUMERIC);}
					c.setCellValue(ConnectionsFROMFIELD.get(i));
					Cell cc = r.getCell(counter01+1); // 0-3
					if (cc == null) {cc = r.createCell(counter01+1, Cell.CELL_TYPE_NUMERIC);}
					cc.setCellValue(ConnectionsFROMINSTANCE.get(i));
					Cell ccc = r.getCell(counter01+2); // 0-3
					if (ccc == null) {ccc = r.createCell(counter01+2, Cell.CELL_TYPE_NUMERIC);}
					ccc.setCellValue(ConnectionsFROMINSTANCETYPE.get(i));
					ConnectionsTOFIELD_PK1.add(ConnectionsTOFIELD.get(i));
					ConnectionsTOINSTANCE_PK1.add(ConnectionsTOINSTANCE.get(i));
					ConnectionsTOINSTANCETYPE_PK1.add(ConnectionsTOINSTANCETYPE.get(i));
					ConnectionsOBJECTPORT.add("" + counter01);	
					ConnectionsOBJECTPORT.add(""+excelcounter01);	
					ConnectionsOBJECTPORT.add(ConnectionsFROMFIELD.get(i));
					ConnectionsOBJECTNAME.add("" + (counter01 + 1));					
					ConnectionsOBJECTNAME.add(""+excelcounter01);					
					ConnectionsOBJECTNAME.add(ConnectionsFROMINSTANCE.get(i));
					ConnectionsOBJECTTYPE.add("" + (counter01 + 2));					
					ConnectionsOBJECTTYPE.add(""+excelcounter01);					
					ConnectionsOBJECTTYPE.add(ConnectionsFROMINSTANCETYPE.get(i));

					}
			}
		
//-----------------------------------------------------------------------------
//			Recursive loop			
//-----------------------------------------------------------------------------


while (true){	
	    counter02 = xml_top_offset;
		counter01=counter01+3;
		excelcounter01 = xml_top_offset;
		//int foreign_key_subtable = ConnectionsTOFIELD_PK1.size();
		System.out.println();
			//System.out.println("foreign_key_subtabl : " +foreign_key_subtable);				
			for (int l = 0; l < ConnectionsTOFIELD_PK1.size(); l++) {
				for (int k = 0; k < ConnectionsTOFIELD.size(); k++) {
				if (ConnectionsFROMFIELD.get(k).equals(ConnectionsTOFIELD_PK1.get(l)) &&
					ConnectionsFROMINSTANCE.get(k).equals(ConnectionsTOINSTANCE_PK1.get(l)) &&
					ConnectionsFROMINSTANCETYPE.get(k).equals(ConnectionsTOINSTANCETYPE_PK1.get(l))						
					){
					counter02=counter02+1;
					excelcounter01 = excelcounter01 + 1;
					System.out.println(" "+ MappingNAME.get(k) + DEFAULT_SEPARATOR+ConnectionsFROMFIELD.get(k)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCE.get(k)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCETYPE.get(k)+DEFAULT_SEPARATOR+ConnectionsTOFIELD.get(k)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCE.get(k)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCETYPE.get(k));
					Row r = sheet.getRow(counter02); // 1-16
					if (r == null) {r = sheet.createRow(counter02);}
					Cell c = r.getCell(counter01); // 0-3
					if (c == null) {c = r.createCell(counter01, Cell.CELL_TYPE_NUMERIC);}
					c.setCellValue(ConnectionsFROMFIELD.get(k));
					Cell cc = r.getCell(counter01+1); // 0-3
					if (cc == null) {cc = r.createCell(counter01+1, Cell.CELL_TYPE_NUMERIC);}
					cc.setCellValue(ConnectionsFROMINSTANCE.get(k));
					Cell ccc = r.getCell(counter01+2); // 0-3
					if (ccc == null) {ccc = r.createCell(counter01+2, Cell.CELL_TYPE_NUMERIC);}
					ccc.setCellValue(ConnectionsFROMINSTANCETYPE.get(k));
					ConnectionsTOFIELD_PK2.add(ConnectionsTOFIELD.get(k));
					ConnectionsTOINSTANCE_PK2.add(ConnectionsTOINSTANCE.get(k));
					ConnectionsTOINSTANCETYPE_PK2.add(ConnectionsTOINSTANCETYPE.get(k));
					ConnectionsOBJECTPORT.add(""+counter01);		
					ConnectionsOBJECTPORT.add(""+excelcounter01);							
					ConnectionsOBJECTPORT.add(ConnectionsFROMFIELD.get(k));				
					ConnectionsOBJECTNAME.add(""+(counter01+1));
					ConnectionsOBJECTNAME.add(""+excelcounter01);
					ConnectionsOBJECTNAME.add(ConnectionsFROMINSTANCE.get(k));
					ConnectionsOBJECTTYPE.add(""+(counter01+2));
					ConnectionsOBJECTTYPE.add(""+excelcounter01);
					ConnectionsOBJECTTYPE.add(ConnectionsFROMINSTANCETYPE.get(k));
					connection_found = true;
					}
				
				}
				if(!connection_found)
				{
					counter02=counter02+1;
					excelcounter01 = excelcounter01 + 1;
					//System.out.println("   -- "+counter02);
					CellStyle style = workbook.createCellStyle();
					style = workbook.createCellStyle();
				    style.setFillForegroundColor(IndexedColors.ORANGE.getIndex());
				    style.setFillPattern(CellStyle.SOLID_FOREGROUND);
					System.out.println(" "+ MappingNAME.get(l) + DEFAULT_SEPARATOR+ConnectionsTOFIELD_PK1.get(l)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCE_PK1.get(l)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCETYPE_PK1.get(l)+DEFAULT_SEPARATOR+"NOT CONNECTED"+DEFAULT_SEPARATOR+"NOT CONNECTED"+DEFAULT_SEPARATOR+"NOT CONNECTED");
					Row r = sheet.getRow(counter02); // 1-16
					if (r == null) {r = sheet.createRow(counter02);}
					
					Cell c = r.getCell(counter01); // 0-3
					if (c == null) {c = r.createCell(counter01, Cell.CELL_TYPE_NUMERIC);}
					c.setCellValue(ConnectionsTOFIELD_PK1.get(l));
					if (ConnectionsTOFIELD_PK1.get(l).equals("NOT CONNECTED")){
						c.setCellStyle(style);
					}
					Cell cc = r.getCell(counter01+1); // 0-3
					if (cc == null) {cc = r.createCell(counter01+1, Cell.CELL_TYPE_NUMERIC);}
					cc.setCellValue(ConnectionsTOINSTANCE_PK1.get(l));
					if (ConnectionsTOINSTANCE_PK1.get(l).equals("NOT CONNECTED")){
						cc.setCellStyle(style);
					}
					Cell ccc = r.getCell(counter01+2); // 0-3
					if (ccc == null) {ccc = r.createCell(counter01+2, Cell.CELL_TYPE_NUMERIC);}
					ccc.setCellValue(ConnectionsTOINSTANCETYPE_PK1.get(l));
					if (ConnectionsTOINSTANCETYPE_PK1.get(l).equals("NOT CONNECTED")){
					ccc.setCellStyle(style);
					}
					ConnectionsOBJECTPORT.add(""+(counter01));
					ConnectionsOBJECTPORT.add(""+excelcounter01);
					ConnectionsOBJECTPORT.add(ConnectionsTOFIELD_PK1.get(l));					
					//ConnectionsOBJECTPORT.add("NOT CONNECTED");					

					ConnectionsOBJECTNAME.add(""+(counter01+1));
					ConnectionsOBJECTNAME.add(""+excelcounter01);
					ConnectionsOBJECTNAME.add(ConnectionsTOINSTANCE_PK1.get(l));
					//ConnectionsOBJECTNAME.add("NOT CONNECTED");
					
					ConnectionsOBJECTTYPE.add(""+(counter01+2));	
					ConnectionsOBJECTTYPE.add(""+excelcounter01);	
					ConnectionsOBJECTTYPE.add(ConnectionsTOINSTANCETYPE_PK1.get(l));
					//ConnectionsOBJECTTYPE.add("NOT CONNECTED");
					
					ConnectionsTOFIELD_PK2.add("NOT CONNECTED");
					ConnectionsTOINSTANCE_PK2.add("NOT CONNECTED");
					ConnectionsTOINSTANCETYPE_PK2.add("NOT CONNECTED");
				}
				connection_found = false;
			}	
			
			
			
			ConnectionsTOFIELD_PK1.clear();
			ConnectionsTOINSTANCE_PK1.clear();
			ConnectionsTOINSTANCETYPE_PK1.clear();
			for (int c = 0; c < ConnectionsTOFIELD_PK2.size(); c++) {
				ConnectionsTOFIELD_PK1.add(ConnectionsTOFIELD_PK2.get(c));
				ConnectionsTOINSTANCE_PK1.add(ConnectionsTOINSTANCE_PK2.get(c));
				ConnectionsTOINSTANCETYPE_PK1.add(ConnectionsTOINSTANCETYPE_PK2.get(c));
			};
			ConnectionsTOFIELD_PK2.clear();
			ConnectionsTOINSTANCE_PK2.clear();
			ConnectionsTOINSTANCETYPE_PK2.clear();
			
			System.out.println("   -- start end of recusive loop");
			all_not_connected = false;
			
			int occurrences = Collections.frequency(ConnectionsTOFIELD_PK1, "NOT CONNECTED");
			int allconnectors = ConnectionsTOFIELD_PK1.size();
			
			if(occurrences == allconnectors){
				System.out.println(" ********* occurrences:" + occurrences + "allconnectors :" + allconnectors);
				all_not_connected = true;
				}
				
			if (all_not_connected){
			//if (ConnectionsTOFIELD_PK1.size()==0){
				System.out.println("   -- !!!!!!!!!!!!!!jump out!!!!!!!!!!!!!!!! --");
				break;
			}
			
	} // While
			
//-----------------------------------------------------------------------------
//				EINDE Recursive loop			
//-----------------------------------------------------------------------------
try {
    FileOutputStream outputStream = new FileOutputStream(FILE_NAME);
	for (int i = 0; i < sheet.getRow(sheet.getLastRowNum()).getPhysicalNumberOfCells()+2 ; ++i) {
		sheet.autoSizeColumn(i);
	}
	workbook.write(outputStream); 
    workbook.close();
    System.out.println("excel file created");
} catch (FileNotFoundException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
}
		//System.out.println(ConnectionsOBJECTPORT);
		//System.out.println(ConnectionsOBJECTNAME);
		//System.out.println(ConnectionsOBJECTTYPE);
		System.out.println("creating excel test file");
		HSSFWorkbook workbooktest = new HSSFWorkbook();
        HSSFSheet sheettest = workbooktest.createSheet("Datatypes in Java");
        int MaxRowNumber = 0;
        for (int i = 0; i < ConnectionsOBJECTPORT.size(); i=i+3) {
        	if (Integer.parseInt(ConnectionsOBJECTPORT.get(i+1)) > MaxRowNumber) {MaxRowNumber = Integer.parseInt(ConnectionsOBJECTPORT.get(i+1));};
        	if (Integer.parseInt(ConnectionsOBJECTNAME.get(i+1)) > MaxRowNumber) {MaxRowNumber = Integer.parseInt(ConnectionsOBJECTNAME.get(i+1));};
        	if (Integer.parseInt(ConnectionsOBJECTTYPE.get(i+1)) > MaxRowNumber) {MaxRowNumber = Integer.parseInt(ConnectionsOBJECTTYPE.get(i+1));};
        }
        MaxRowNumber=MaxRowNumber+1;
        System.out.println("max row number : "+MaxRowNumber );
        
		CellStyle styletest = workbooktest.createCellStyle();
		styletest = workbooktest.createCellStyle();
	    styletest.setFillForegroundColor(IndexedColors.ORANGE.getIndex());
	    styletest.setFillPattern(CellStyle.SOLID_FOREGROUND);
	    
        for (int excelRowNUM = 0; excelRowNUM < MaxRowNumber; excelRowNUM++) {
        	Row rowtest = sheettest.createRow(excelRowNUM);
  
        	for (int i = 0; i < ConnectionsOBJECTPORT.size(); i=i+3) {
        			if (excelRowNUM == Integer.parseInt(ConnectionsOBJECTPORT.get(i+1))){
        				Cell celltest = rowtest.createCell(Integer.parseInt(ConnectionsOBJECTPORT.get(i)));
        				celltest.setCellValue(ConnectionsOBJECTPORT.get(i+2));
        				if ("NOT CONNECTED".equals(ConnectionsOBJECTPORT.get(i+2))){
        				celltest.setCellStyle(styletest);
        				}
        			}
        			if (excelRowNUM == Integer.parseInt(ConnectionsOBJECTNAME.get(i+1))){
        				Cell celltest = rowtest.createCell(Integer.parseInt(ConnectionsOBJECTNAME.get(i)));
        				celltest.setCellValue(ConnectionsOBJECTNAME.get(i+2));
        				if ("NOT CONNECTED".equals(ConnectionsOBJECTPORT.get(i+2))){
        				celltest.setCellStyle(styletest);
        				}
        			}
        			if (excelRowNUM == Integer.parseInt(ConnectionsOBJECTTYPE.get(i+1))){
        				Cell celltest = rowtest.createCell(Integer.parseInt(ConnectionsOBJECTTYPE.get(i)));
        				celltest.setCellValue(ConnectionsOBJECTTYPE.get(i+2));
        				if ("NOT CONNECTED".equals(ConnectionsOBJECTPORT.get(i+2))){
        				celltest.setCellStyle(styletest);
        				}
        			}
        		//}
        	}
        }
		try {
		    FileOutputStream outputStreamtest = new FileOutputStream(FILE_NAMETEST);
			for (int i = 0; i < sheettest.getRow(sheettest.getLastRowNum()).getPhysicalNumberOfCells()+8 ; ++i) {
				sheettest.autoSizeColumn(i);
			}
			workbooktest.write(outputStreamtest); 
		    workbooktest.close();
		    System.out.println("excel test file created");
		} catch (FileNotFoundException e) {
		    e.printStackTrace();
		} catch (IOException e) {
		    e.printStackTrace();
		}
   } //main function
	
} //class
	
