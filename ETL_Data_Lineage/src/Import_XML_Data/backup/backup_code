package Import_XML_Data;

//https://www.mkyong.com/java/how-to-read-xml-file-in-java-dom-parser/
// test file
//
// path XML object connector from root element
//<POWERMART>
//<REPOSITORY>
//<FOLDER>
//<MAPPING>
//<CONNECTOR>
//
//CONNECTOR:
//FROMFIELD, 
//FROMINSTANCE, 
//FROMINSTANCETYPE, 
//TOFIELD, 
//TOINSTANCE, 
//TOINSTANCETYPE, 

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Powercenter_XML_Import {
	
	private static final char DEFAULT_SEPARATOR = ',';
	
	public static void main(String argv[]) {
		List<String> ConnectionsFROMFIELD = 			new ArrayList<String>();
		List<String> ConnectionsFROMINSTANCE = 			new ArrayList<String>();
		List<String> ConnectionsFROMINSTANCETYPE = 		new ArrayList<String>();
		List<String> ConnectionsTOFIELD = 				new ArrayList<String>();
		List<String> ConnectionsTOINSTANCE = 			new ArrayList<String>();
		List<String> ConnectionsTOINSTANCETYPE = 		new ArrayList<String>();
		List<String> ConnectionsTOFIELD_PK1 = 			new ArrayList<String>();
		List<String> ConnectionsTOINSTANCE_PK1 = 		new ArrayList<String>();
		List<String> ConnectionsTOINSTANCETYPE_PK1 = 	new ArrayList<String>();
		List<String> ConnectionsTOFIELD_PK2 = 			new ArrayList<String>();
		List<String> ConnectionsTOINSTANCE_PK2 = 		new ArrayList<String>();
		List<String> ConnectionsTOINSTANCETYPE_PK2 = 	new ArrayList<String>();
		
		List<String> ConnectionsOBJECTPORT = 			new ArrayList<String>();
		List<String> ConnectionsOBJECTNAME = 			new ArrayList<String>();
		List<String> ConnectionsOBJECTTYPE = 			new ArrayList<String>();

	
		String beginValueConnection = "Source Definition";
		boolean connection_found = false;
		boolean all_not_connected = false;
		try {
			File fXmlFile = new File("C:/ETL_WORFLOWS/REINS/wkf_RE_INSURANCE_LIFEJ.XML");
			DocumentBuilderFactory dbFactory 	= DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder 			= dbFactory.newDocumentBuilder();
			Document doc 						= dBuilder.parse(fXmlFile);

			//optional, but recommended
			//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			doc.getDocumentElement().normalize();

			System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

			NodeList nList = doc.getElementsByTagName("CONNECTOR");

			System.out.println("----------------------------");

			
			for (int temp = 0; temp < nList.getLength(); temp++) {

				Node nNode = nList.item(temp);

				//System.out.println("\nCurrent Element :" + nNode.getNodeName());
				//all element is the XML file
//-----------------------------------------------------------------------------
//				load super table 		
//-----------------------------------------------------------------------------							
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					Element eElement = (Element) nNode;
					ConnectionsFROMFIELD.add(eElement.getAttribute("FROMFIELD"));
					ConnectionsFROMINSTANCE.add(eElement.getAttribute("FROMINSTANCE"));
					ConnectionsFROMINSTANCETYPE.add(eElement.getAttribute("FROMINSTANCETYPE"));
					ConnectionsTOFIELD.add(eElement.getAttribute("TOFIELD"));
					ConnectionsTOINSTANCE.add(eElement.getAttribute("TOINSTANCE"));
					ConnectionsTOINSTANCETYPE.add(eElement.getAttribute("TOINSTANCETYPE"));
				}
			}
		    } catch (Exception e) {
			e.printStackTrace();
		    }
			int Length_supertable = ConnectionsTOFIELD.size();
			//System.out.println("length supertable : " +Length_supertable);
//-----------------------------------------------------------------------------
//			start of Recursive data		
//-----------------------------------------------------------------------------			
			String ConnectionINSTANCETYPE = beginValueConnection;
			System.out.println("#1 FROMFIELD normal for loop");
			//initial phase data lineage powercenter mapping (connector type Source Definition) 
			//System.out.println("#1 super table ");
			//System.out.println("----------------------------");
			//System.out.println(ConnectionsTOFIELD);
			//System.out.println(ConnectionsTOINSTANCE);
			//System.out.println(ConnectionsTOINSTANCETYPE);
			int counter02 = 0;
			for (int i = 0; i < ConnectionsFROMFIELD.size(); i++) {
				//System.out.println(counter02);
				if (ConnectionsFROMINSTANCETYPE.get(i).equals(ConnectionINSTANCETYPE)){
					counter02=counter02+1;
					System.out.println("   -- "+counter02+DEFAULT_SEPARATOR+ConnectionsFROMFIELD.get(i)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCE.get(i)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCETYPE.get(i)+DEFAULT_SEPARATOR+ConnectionsTOFIELD.get(i)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCE.get(i)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCETYPE.get(i));				
					ConnectionsTOFIELD_PK1.add(ConnectionsTOFIELD.get(i));
					ConnectionsTOINSTANCE_PK1.add(ConnectionsTOINSTANCE.get(i));
					ConnectionsTOINSTANCETYPE_PK1.add(ConnectionsTOINSTANCETYPE.get(i));
					ConnectionsOBJECTPORT.add("0");	
					ConnectionsOBJECTPORT.add(""+i);	
					ConnectionsOBJECTPORT.add(ConnectionsFROMFIELD.get(i));
					ConnectionsOBJECTPORT.add("0");
					ConnectionsOBJECTPORT.add(""+i);
					ConnectionsOBJECTPORT.add(ConnectionsTOFIELD.get(i));
					ConnectionsOBJECTNAME.add("0");					
					ConnectionsOBJECTNAME.add(""+i);					
					ConnectionsOBJECTNAME.add(ConnectionsFROMINSTANCE.get(i));
					ConnectionsOBJECTNAME.add("0");					
					ConnectionsOBJECTNAME.add(""+i);					
					ConnectionsOBJECTNAME.add(ConnectionsTOINSTANCE.get(i));	
					ConnectionsOBJECTTYPE.add("0");					
					ConnectionsOBJECTTYPE.add(""+i);					
					ConnectionsOBJECTTYPE.add(ConnectionsFROMINSTANCETYPE.get(i));
					ConnectionsOBJECTTYPE.add("0");						
					ConnectionsOBJECTTYPE.add(""+i);					
					ConnectionsOBJECTTYPE.add(ConnectionsTOINSTANCETYPE.get(i));
					}
			}
		
//-----------------------------------------------------------------------------
//			Recursive loop			
//-----------------------------------------------------------------------------
int counter01 = 0;
counter02 = 0;
while (true){	
		counter01=counter01+1;
		int foreign_key_subtable = ConnectionsTOFIELD_PK1.size();
		System.out.println();
		counter02 = 0;
			//System.out.println("foreign_key_subtabl : " +foreign_key_subtable);				
			for (int l = 0; l < ConnectionsTOFIELD_PK1.size(); l++) {
				for (int k = 0; k < ConnectionsTOFIELD.size(); k++) {
				if (ConnectionsFROMFIELD.get(k).equals(ConnectionsTOFIELD_PK1.get(l)) &&
					ConnectionsFROMINSTANCE.get(k).equals(ConnectionsTOINSTANCE_PK1.get(l)) &&
					ConnectionsFROMINSTANCETYPE.get(k).equals(ConnectionsTOINSTANCETYPE_PK1.get(l))						
					){
					counter02=counter02+1;
					System.out.println("   -- "+counter02+DEFAULT_SEPARATOR+ConnectionsFROMFIELD.get(k)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCE.get(k)+DEFAULT_SEPARATOR+ConnectionsFROMINSTANCETYPE.get(k)+DEFAULT_SEPARATOR+ConnectionsTOFIELD.get(k)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCE.get(k)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCETYPE.get(k));
					ConnectionsTOFIELD_PK2.add(ConnectionsTOFIELD.get(k));
					ConnectionsTOINSTANCE_PK2.add(ConnectionsTOINSTANCE.get(k));
					ConnectionsTOINSTANCETYPE_PK2.add(ConnectionsTOINSTANCETYPE.get(k));
					ConnectionsOBJECTPORT.add(""+counter01);		
					ConnectionsOBJECTPORT.add(""+k);							
					ConnectionsOBJECTPORT.add(ConnectionsFROMFIELD.get(k));
					ConnectionsOBJECTPORT.add(""+counter01);
					ConnectionsOBJECTPORT.add(""+k);
					ConnectionsOBJECTPORT.add(ConnectionsTOFIELD.get(k));					
					ConnectionsOBJECTNAME.add(""+counter01);
					ConnectionsOBJECTNAME.add(""+k);
					ConnectionsOBJECTNAME.add(ConnectionsFROMINSTANCE.get(k));
					ConnectionsOBJECTNAME.add(""+counter01);
					ConnectionsOBJECTNAME.add(""+k);
					ConnectionsOBJECTNAME.add(ConnectionsTOINSTANCE.get(k));
					ConnectionsOBJECTTYPE.add(""+counter01);
					ConnectionsOBJECTTYPE.add(""+k);
					ConnectionsOBJECTTYPE.add(ConnectionsFROMINSTANCETYPE.get(k));
					ConnectionsOBJECTTYPE.add(""+counter01);	
					ConnectionsOBJECTTYPE.add(""+k);	
					ConnectionsOBJECTTYPE.add(ConnectionsTOINSTANCETYPE.get(k));
					connection_found = true;
					}
				
				}
				if(!connection_found)
				{
					counter02=counter02+1;
					//System.out.println("   -- "+counter02);
					System.out.println("   -- "+counter02+DEFAULT_SEPARATOR+ConnectionsTOFIELD_PK1.get(l)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCE_PK1.get(l)+DEFAULT_SEPARATOR+ConnectionsTOINSTANCETYPE_PK1.get(l)+DEFAULT_SEPARATOR+"NOT CONNECTED"+DEFAULT_SEPARATOR+"NOT CONNECTED"+DEFAULT_SEPARATOR+"NOT CONNECTED");
					ConnectionsTOFIELD_PK2.add("NOT CONNECTED");
					ConnectionsTOINSTANCE_PK2.add("NOT CONNECTED");
					ConnectionsTOINSTANCETYPE_PK2.add("NOT CONNECTED");
				}
				connection_found = false;
			}	
			ConnectionsTOFIELD_PK1.clear();
			ConnectionsTOINSTANCE_PK1.clear();
			ConnectionsTOINSTANCETYPE_PK1.clear();
			for (int c = 0; c < ConnectionsTOFIELD_PK2.size(); c++) {
				ConnectionsTOFIELD_PK1.add(ConnectionsTOFIELD_PK2.get(c));
				ConnectionsTOINSTANCE_PK1.add(ConnectionsTOINSTANCE_PK2.get(c));
				ConnectionsTOINSTANCETYPE_PK1.add(ConnectionsTOINSTANCETYPE_PK2.get(c));
			};
			ConnectionsTOFIELD_PK2.clear();
			ConnectionsTOINSTANCE_PK2.clear();
			ConnectionsTOINSTANCETYPE_PK2.clear();
			
			System.out.println("   -- start end of recusive loop");
			all_not_connected = false;
			
			int occurrences = Collections.frequency(ConnectionsTOFIELD_PK1, "NOT CONNECTED");
			int allconnectors = ConnectionsTOFIELD_PK1.size();
			
			if(occurrences == allconnectors){
				System.out.println(" ********* occurrences:" + occurrences + "allconnectors :" + allconnectors);
				all_not_connected = true;
				}
				
			if (all_not_connected){
			//if (ConnectionsTOFIELD_PK1.size()==0){
				System.out.println("   -- !!!!!!!!!!!!!!jump out!!!!!!!!!!!!!!!! --");
				break;
			}
			

	} // While
			
//-----------------------------------------------------------------------------
//				EINDE Recursive loop			
//-----------------------------------------------------------------------------

		//System.out.println(ConnectionsOBJECTPORT);
		//System.out.println(ConnectionsOBJECTNAME);
		//System.out.println(ConnectionsOBJECTTYPE);


   } //main function
} //class
	
